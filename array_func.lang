
Main
{
	func1(cstr[][] argv, cstr[][][] envp) static ->int
	{
		printany "argv.size()=", argv.size(), ",envp.size()=", envp.size(), '\n';
		printany $call_stack;
	}
	func(cstr[] argv, cstr[] envp) static ->int
	{
		cstr[][] arg;
		arg	= new cstr[3][];
		cstr[][][] env;
		env = new cstr[5][][];
		func1(arg, env);
		printany $call_stack;
		printany "argv.size()=", argv.size(), ",envp.size()=", envp.size(), '\n';
		int idx;
		idx = 0;
		while (idx < argv.size())
		{
			printany "argv[", idx, "]=", argv[idx], '\n';
			idx = idx + 1;
		}
		idx = 0;
		while (idx < envp.size())
		{
			printany "envp[", idx, "]=", envp[idx], '\n';
			idx = idx + 1;
		}
		
	}
	main(cstr[] argv, cstr[] envp) static ->int
	{
		return func(argv, envp);
	}
}